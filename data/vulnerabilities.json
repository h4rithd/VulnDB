[
  {
    "name": "HTML Injection",
    "issueBackground": "HTML Injection is a web security vulnerability that occurs when an application does not properly validate or sanitize user input before including it in its HTML output. This allows attackers to inject malicious HTML content into web pages, which can lead to defacement, data manipulation, or even Cross-Site Scripting (XSS) if JavaScript is executed. This vulnerability can compromise the integrity of the web application and the trust of its users.",
    "Recommendations" :[ 
      "Validate all user inputs on both the client-side and server-side.",
      "Use libraries or frameworks to sanitize input and escape output before rendering it on a web page.",
      "Encode user inputs that will be rendered as HTML to prevent injection of unwanted tags or attributes.",
      "Implement Content Security Policies (CSP) to restrict the execution of unauthorized scripts.",
      "Use templating engines or frameworks that automatically encode outputs, reducing the risk of injection.",
      "Avoid using untrusted data directly in HTML attributes or tags.",
      "Use a WAF to detect and block malicious inputs at runtime.",
      "Provide training on secure coding techniques to minimize the risk of introducing vulnerabilities."
  ],
    "relatedLinks": [
      "[1] https://www.imperva.com/learn/application-security/html-injection/",
      "[2] https://www.invicti.com/learn/html-injection/"
    ]    
  },
  {
    "name": "Insecure Direct Object Reference (IDOR)",
    "issueBackground": "Insecure Direct Object References (IDOR) is an access control vulnerability that arises when applications allow users to access or modify objects (e.g., database entries, files, or resources) directly by referencing them through parameters like IDs or keys, without validating proper authorization. Exploiting this flaw, attackers can manipulate these references to gain unauthorized access to data or functionality, potentially leading to breaches of confidentiality, integrity, or availability.",
    "Recommendations" :[ 
      "Ensure server-side validation of user permissions for every resource request or action.",
      "Verify that users can access only the resources they are authorized to view or modify.",
      "Replace direct object references with securely generated indirect identifiers (e.g., UUIDs, tokenized IDs).",
      "Use RBAC to grant access to resources based on user roles and the principle of least privilege.",
      "Log all access attempts and monitor for unusual patterns or unauthorized access attempts.",
      "Implement alert mechanisms for repeated unauthorized access attempts.",
      "Perform regular penetration testing, secure code reviews, and vulnerability scans to identify and mitigate IDOR risks."
  ],
    "relatedLinks": [
      "[1] https://www.varonis.com/blog/what-is-idor-insecure-direct-object-reference",
      "[2] https://www.invicti.com/learn/insecure-direct-object-references-idor/"
    ]
  },
  {
    "name": "Insecure Session Management",
    "issueBackground": "Insecure session management is a vulnerability that arises when applications fail to securely create, manage, and terminate user sessions. This can lead to session hijacking, fixation, or unauthorized access if session identifiers are predictable, inadequately protected, or improperly invalidated. Attackers exploiting this flaw can impersonate users, access sensitive information, or perform unauthorized actions within the application.",
    "Recommendations" :[ 
      "Regenerate session identifiers after login, privilege escalation, or other sensitive operations to prevent session fixation.",
      "Mark session cookies with the HttpOnly, Secure, and SameSite=Strict attributes.",
      "Ensure cookies are transmitted only over secure (HTTPS) connections.",
      "Set idle and absolute timeouts for sessions to reduce the risk of hijacking.",
      "Force users to re-authenticate after a defined period of inactivity.",
      "Use Cross-Site Request Forgery (CSRF) tokens to protect session integrity.",
      "Use securely generated, random, and sufficiently long session identifiers to prevent brute-force attacks.",
      "Provide users with a logout feature that fully invalidates the session on the server.",
      "Ensure proper cleanup of server-side session data upon logout."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/www-project-mobile-top-10/2014-risks/m9-improper-session-handling",
      "[2] https://help.fluidattacks.com/portal/en/kb/articles/criteria-vulnerabilities-076"
    ]
  },
  {
    "name": "Privilege Escalation",
    "issueBackground": "Privilege escalation is a vulnerability that allows attackers to gain higher-level permissions or access than intended. This occurs due to improper implementation of access controls, insecure configurations, or flaws in the application's code. Exploiting privilege escalation, attackers can compromise sensitive data, perform unauthorized actions, or control critical application functionality, leading to a significant security breach.",
    "Recommendations" :[ 
      "Use role-based access control (RBAC) to ensure that users only have the permissions necessary for their roles.",
      "Enforce the principle of least privilege (PoLP) to minimize access rights.",
      "Validate permissions for all actions and resources on the server side.",
      "Avoid relying on client-side enforcement of permissions.",
      "Restrict access to sensitive API endpoints based on user roles and permissions.",
      "Test the effectiveness of role and permission management controls."
  ],
    "relatedLinks": [
      "[1] https://www.beyondtrust.com/blog/entry/privilege-escalation-attack-defense-explained",
      "[2] https://www.imperva.com/learn/data-security/privilege-escalation/"
    ]
  },
  {
    "name": "Clickjacking",
    "issueBackground": "Clickjacking is a web security vulnerability that occurs when an attacker tricks users into clicking on elements of a website without their knowledge. By embedding a legitimate web page inside an invisible or opaque iframe, attackers can overlay it with misleading content. This exploit can lead to unintended actions, such as changing user settings, initiating unauthorized transactions, or even compromising sensitive information.",
    "Recommendations" :[ 
      "Configure the HTTP header X-Frame-Options to DENY or SAMEORIGIN to prevent your site from being embedded in iframes on unauthorized domains.",
      "Use CSP frame-ancestors directive to explicitly specify which domains are allowed to embed your content.",
      "Ensure that critical actions require explicit user interactions, such as multi-step confirmations or reauthentication.",
      "Implement JavaScript-based frame-busting techniques to detect and prevent your content from being loaded in iframes."
  ],
    "relatedLinks": [
      "[1] https://www.imperva.com/learn/application-security/clickjacking/",
      "[2] https://www.pingidentity.com/en/resources/cybersecurity-fundamentals/threats/clickjacking.html"
    ]
  },
  {
    "name": "Session Token in URL",
    "issueBackground": "Storing session tokens in the URL is a security vulnerability that occurs when sensitive tokens, such as session IDs or authentication tokens, are included as part of the URL. This practice is insecure because URLs are often logged in browser history, web server logs, or shared accidentally, exposing session tokens to unauthorized parties. An attacker who obtains these tokens can hijack user sessions, gaining unauthorized access to accounts or sensitive information.",
    "Recommendations" :[ 
      "Use secure cookies with the HttpOnly attribute to store session tokens instead of including them in the URL.",
      "Ensure all communication between clients and servers is encrypted using HTTPS to protect tokens from being intercepted.",
      "Set short expiration times for session tokens and implement automatic token rotation to reduce exposure.",
      "Mark cookies with Secure, HttpOnly, and SameSite=Strict attributes to prevent them from being accessed via JavaScript or sent in cross-site requests."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/www-community/attacks/Session_fixation",
      "[2] https://www.acunetix.com/vulnerabilities/web/session-id-in-url/"
    ]
  },
  {
    "name": "Lack of Resources & Rate Limiting",
    "issueBackground": "A lack of resources and rate limiting occurs when an application fails to enforce restrictions on the number or frequency of requests a user or client can make. This can lead to exploitation, such as brute force attacks, resource exhaustion (DoS attacks), or abuse of system functionality. Without proper rate limiting, attackers can overwhelm the application, causing degraded performance, downtime, or unauthorized access to resources.",
    "Recommendations" :[ 
      "Introduce CAPTCHA challenges for unusual or excessive requests to distinguish legitimate users from automated scripts.",
      "Use API gateways to enforce rate limiting, authentication, and quota management for API endpoints.",
      "Define and enforce limits on the number of requests per client within a specific time frame. Use techniques such as token buckets or sliding windows for rate control.",
      "Train developers to identify and mitigate resource abuse risks. Inform users about acceptable usage policies."
  ],
    "relatedLinks": [
      "[1] https://www.indusface.com/blog/api42019-lack-of-resources-rate-limiting/",
      "[2] https://apisecurity.io/encyclopedia/content/owasp/api4-lack-of-resources-and-rate-limiting.htm"
    ]
  },
  {
    "name": "Sensitive Information Disclosure",
    "issueBackground": "Sensitive information disclosure occurs when an application unintentionally exposes sensitive or confidential data, such as user credentials, personal information, API keys, system configurations, or internal business logic. This can happen due to misconfigurations, insufficient access controls, or improper error handling. If exploited, attackers can use the disclosed information to launch further attacks, compromise systems, or steal sensitive data.",
    "Recommendations" :[ 
      "Implement strict access controls using the principle of least privilege (PoLP) to ensure only authorized users can access sensitive information.",
      "Avoid exposing detailed error messages to end users that may contain sensitive data, such as database queries, file paths, or stack traces.",
      "Encrypt sensitive information in transit using protocols like HTTPS and at rest using robust encryption standards (e.g., AES-256).",
      "Avoid storing sensitive information like API keys, passwords, or credentials in source code. Use secure vaults or environment variables for secrets management."
  ],
    "relatedLinks": [
      "[1] https://cwe.mitre.org/data/definitions/200.html",
      "[2] https://www.hackerone.com/blog/how-information-disclosure-vulnerability-led-critical-data-exposure"
    ]
  },
  {
    "name": "Missing Server-Side Validation",
    "issueBackground": "Missing server-side validation occurs when an application relies solely on client-side mechanisms (e.g., JavaScript) to validate user input, without implementing robust checks on the server side. This creates a security risk as attackers can bypass client-side controls using tools like proxies or custom scripts to manipulate input data. Exploiting this vulnerability may lead to unauthorized access, injection attacks (e.g., SQL or XSS), or data integrity issues.",
    "Recommendations" :[ 
      "Validate all user inputs on the server side, regardless of whether client-side validation is also performed. Ensure input adheres to expected formats, lengths, and types.",
      "Remove potentially malicious content from inputs by using sanitization techniques. Escape data before rendering it in the output to prevent injection attacks.",
      "Use strict data types, regex patterns, or predefined lists (e.g., whitelists) to enforce acceptable input values.",
      "Ensure proper checks are in place to confirm the authenticity of the user and their permission to access or modify specific resources."
  ],
    "relatedLinks": [
      "[1] https://formspree.io/blog/server-side-validation/",
      "[2] https://www.packetlabs.net/posts/input-validation/"
    ]
  },
  {
    "name": "User Enumeration",
    "issueBackground": "User enumeration occurs when an application reveals information about existing user accounts through error messages, responses, or timing differences during authentication or other actions. For instance, an application may return distinct messages for valid versus invalid usernames during login attempts or password resets. This allows attackers to verify the existence of user accounts, potentially facilitating brute force or targeted attacks.",
    "Recommendations" :[ 
      "Use generic and consistent error messages such as “Invalid credentials” or “Action could not be completed” to avoid disclosing whether a username or email exists.",
      "Ensure that application responses take a uniform amount of time, regardless of whether the user exists, to prevent timing-based enumeration.",
      "Apply rate limiting to restrict the number of requests per IP or user account within a specific time frame.",
      "Introduce CAPTCHA for repeated login attempts, password resets, or other actions that could reveal user account information."
  ],
    "relatedLinks": [
      "[1] https://stytch.com/blog/what-is-an-enumeration-attack/",
      "[2] https://www.virtuesecurity.com/kb/username-enumeration/"
    ]
  },
  {
    "name": "Account Takeover",
    "issueBackground": "Account takeover occurs when an attacker gains unauthorized access to a user's account, often by exploiting vulnerabilities such as weak authentication mechanisms, credential reuse, phishing, or session management flaws. This type of attack compromises user privacy and security, potentially leading to fraud, data breaches, or misuse of the account for malicious purposes.",
    "Recommendations" :[ 
      "Ensure API endpoints related to authentication are secure, properly rate-limited, and protected from replay attacks.",
      "Implement multi-factor authentication (MFA) to add an extra layer of security.",
      "Ensure secure session token handling by using unique, cryptographically strong tokens.",
      "Set session tokens to expire after inactivity and regenerate them upon reauthentication.",
      "Hash passwords using strong algorithms such as bcrypt, Argon2, or PBKDF2, with sufficient computational cost and salt.",
      "Verify user identity through multiple secure methods (e.g., email verification, MFA) during password reset or account recovery processes."
  ],
    "relatedLinks": [
      "[1] https://www.imperva.com/learn/application-security/account-takeover-ato/",
      "[2] https://www.fortinet.com/resources/cyberglossary/account-takeover"
    ]
  },
  {
    "name": "Improper Authorization",
    "issueBackground": "Improper authorization occurs when an application fails to adequately verify whether a user has the necessary permissions to perform a specific action or access a resource. This flaw can lead to unauthorized access to sensitive data, functionality, or administrative features. Improper authorization is commonly associated with broken access control vulnerabilities, such as IDOR, privilege escalation, or bypassing authorization mechanisms.",
    "Recommendations" :[ 
      "Define and enforce strict access control policies that specify which users or roles have permission to access specific resources and perform particular actions.",
      "Ensure that the system performs proper authorization checks for every request to access resources or execute actions, verifying that the user has the appropriate permissions.",
      "Assign users the minimum level of access necessary to perform their duties, reducing the risk of unauthorized access or actions.",
      "Implement RBAC to manage permissions based on user roles, simplifying the assignment and management of access rights.",
      "Keep detailed logs of access attempts and actions performed within the system. Regularly review these logs to detect and respond to unauthorized access or activities."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
      "[2] https://cwe.mitre.org/data/definitions/285.html"
    ]
  },
  {
    "name": "Improper Session Handling",
    "issueBackground": "Improper session handling occurs when an application fails to securely create, manage, or terminate user sessions. Vulnerabilities in session management can lead to session hijacking, fixation, or misuse, allowing attackers to impersonate legitimate users and gain unauthorized access to their accounts. Weak session handling is often caused by insecure cookie management, improper session expiration, or insufficient protection of session tokens.",
    "Recommendations" :[ 
      "Generate session tokens using cryptographically secure algorithms.",
      "Ensure tokens are sufficiently random to prevent prediction or brute-force attacks.",
      "Set the Secure flag on cookies to ensure they are only transmitted over HTTPS.",
      "Use the HttpOnly flag to prevent client-side scripts from accessing session cookies.",
      "Set the SameSite attribute to mitigate cross-site request forgery (CSRF) attacks.",
      "Implement session timeout mechanisms to invalidate sessions after a period of inactivity.",
      "Use absolute expiration for long-lived sessions to enforce reauthentication.",
      "Regenerate session tokens upon login, privilege escalation, or other critical actions to prevent session fixation attacks.",
      "Properly terminate sessions when a user logs out by invalidating the associated session token on the server.",
      "Limit the number of concurrent sessions per user to prevent misuse.",
      "Lock or expire idle sessions after a predefined duration."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/www-project-mobile-top-10/2014-risks/m9-improper-session-handling",
      "[2] https://knowledge-base.secureflag.com/vulnerabilities/broken_authentication/broken_session_management_vulnerability.html"
    ]
  },
  {
    "name": "Broken Access Control",
    "issueBackground": "Broken access control occurs when an application fails to enforce proper restrictions on user actions or resource access based on their roles and privileges. This can allow attackers to bypass authorization mechanisms and perform unauthorized actions, such as accessing sensitive data, modifying user accounts, or escalating privileges. Broken access control is a critical vulnerability and is one of the most common issues identified in web applications.",
    "Recommendations" :[ 
      "Always implement access control checks on the server side to prevent users from bypassing client-side restrictions.",
      "Ensure authorization is verified for every request, including API calls and sensitive actions.",
      "Define roles and assign specific permissions to each role.",
      "Ensure that users can only access resources and functionalities allowed by their role.",
      "Use attributes such as user ID, location, time, or action type to enforce more granular access control policies.",
      "Do not expose internal identifiers (e.g., database keys) in URLs or client-side data. Use secure, unique references instead.",
      "Implement strict checks to validate user access to specific objects, such as files, records, or database entries.",
      "Apply authentication and authorization checks for every API endpoint. Ensure endpoints are not accessible without proper permissions.",
      "Limit permissions to the minimum required for a user's role or task to reduce the impact of potential exploitation."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
      "[2] https://brightsec.com/blog/broken-access-control-attack-examples-and-4-defensive-measures/"
    ]
  },
  {
    "name": "Cryptographic Failures",
    "issueBackground": "Cryptographic failures occur when sensitive data is not adequately protected during storage or transmission due to weak encryption, misconfigured cryptographic settings, or the use of insecure algorithms. This vulnerability can lead to the exposure of sensitive information, such as passwords, credit card numbers, or personally identifiable information (PII), and compromise the confidentiality and integrity of the application.",
    "Recommendations" :[ 
      "Implement industry-standard algorithms, such as AES-256 for encryption and SHA-256 or stronger for hashing.",
      "Avoid outdated or weak algorithms like MD5, SHA-1, or DES.",
      "Use secure protocols, such as HTTPS (TLS 1.2 or higher), to encrypt data during transmission.",
      "Enforce the use of secure ciphers and disable weak ones.",
      "Encrypt sensitive data stored in databases, files, or backups using strong encryption algorithms.",
      "Use encryption keys stored securely in a hardware security module (HSM) or key management service (KMS).",
      "Rotate encryption keys periodically and after any suspected compromise.",
      "Do not hardcode keys or store them in source code repositories.",
      "Rely on well-tested cryptographic libraries and frameworks instead of attempting to create custom cryptographic solutions.",
      "Hash passwords with algorithms designed for password storage, such as bcrypt, Argon2, or PBKDF2.",
      "Use appropriate work factors to make brute-forcing impractical.",
      "Remove support for outdated protocols like SSL and insecure cipher suites to reduce attack surface.",
      "Enable HTTP Strict Transport Security (HSTS) to force the use of HTTPS for all communications."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
      "[2] https://aurigait.com/blog/owasp-cryptographic-failure-information-disclosure-vulnerabilities/"
    ]
  },
  {
    "name": "Vulnerable and Outdated Components",
    "issueBackground": "Vulnerable and outdated components arise when an application uses third-party libraries, frameworks, or software that contain known vulnerabilities. Attackers can exploit these vulnerabilities to compromise the application's security, leading to data breaches, unauthorized access, or system compromise. The risk is heightened when organizations fail to patch or update these components promptly or lack awareness of dependencies in their software stack.",
    "Recommendations" :[ 
      "Monitor and update all third-party libraries, frameworks, and software to their latest stable versions.",
      "Use tools like Dependabot, Snyk, or OWASP Dependency-Check to identify and manage outdated dependencies.",
      "Keep an up-to-date inventory of all third-party components, including their versions and sources.",
      "Identify direct and transitive dependencies for comprehensive tracking.",
      "Download components only from trusted repositories or official websites to reduce the risk of tampered files.",
      "Regularly review vulnerability databases like the NVD (National Vulnerability Database) or use automated tools to detect vulnerabilities in components.",
      "Implement a policy for testing and deploying patches in a timely manner.",
      "Prioritize critical and high-severity patches for immediate action.",
      "Periodically audit the application to identify and remove unused or obsolete libraries and plugins.",
      "Use dependency management tools to define strict versioning policies (e.g., npm, Maven, Pipenv).",
      "Enable lock files (e.g., package-lock.json, Pipfile.lock) to maintain version consistency.",
      "If an update is not immediately feasible, isolate vulnerable components to minimize their exposure."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
      "[2] https://www.vumetric.com/blog/owasp-top-10-a06-vulnerable-and-outdated-components-explained/"
    ]
  },
  {
    "name": "Server-Side Request Forgery (SSRF)",
    "issueBackground": "Server-Side Request Forgery (SSRF) occurs when an attacker manipulates an application to send unauthorized requests from the server to other internal or external systems. This can lead to unauthorized access to sensitive internal resources, such as metadata services, private APIs, or network services. SSRF vulnerabilities often arise due to insufficient input validation on URLs or endpoints provided by users.",
    "Recommendations" :[ 
      "Implement strict input validation to only allow URLs or endpoints that match a predefined whitelist.",
      "Reject requests with IP addresses (e.g., 127.0.0.1, private ranges like 10.0.0.0/8, 192.168.0.0/16, etc.) or URLs with non-standard schemes like file://.",
      "Avoid directly including user-provided input in requests. Use parameterized APIs to construct requests securely.",
      "Isolate systems and services in different network zones to prevent unauthorized access.",
      "Block requests from the server to internal networks, unless explicitly required.",
      "Limit outbound connections from the server to trusted domains or IP ranges.",
      "Configure firewalls to block unnecessary egress traffic.",
      "If possible, disable access to protocols such as HTTP, HTTPS, FTP, or Gopher unless required by the application.",
      "Validate and resolve domain names to ensure they point to authorized IP ranges.",
      "Prevent exploitation via DNS rebinding by rechecking IP addresses before making requests.",
      "Block direct access to metadata services, such as AWS EC2 metadata (169.254.169.254) or GCP metadata endpoints, from the application.",
      "If metadata access is necessary, restrict it to only specific, secure APIs."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/",
      "[2] https://www.imperva.com/learn/application-security/server-side-request-forgery-ssrf/"
    ]
  },
  {
    "name": "Stored Cross-Site Scripting (XSS)",
    "issueBackground": "Stored Cross-Site Scripting (XSS), also known as persistent XSS, occurs when malicious scripts are injected into a web application and stored in its database or other persistent storage. When unsuspecting users access the affected page or content, the script is executed in their browsers, often without their knowledge. This can lead to account compromise, session hijacking, data theft, or even malware delivery.",
    "Recommendations" :[ 
      "Validate and sanitize all user inputs on the server side to remove potentially malicious code.",
      "Escape special characters in user-generated content before rendering it on the web page.",
      "Define a strict CSP header to restrict the sources of executable scripts (e.g., script-src 'self';).",
      "Set the HttpOnly flag on cookies to prevent them from being accessed via JavaScript.",
      "Use the Secure flag to ensure cookies are transmitted only over HTTPS.",
      "Use parameterized queries or prepared statements to prevent script injection into databases."
  ],
    "relatedLinks": [
      "[1] https://www.imperva.com/learn/application-security/cross-site-scripting-xss-attacks/",
      "[2] https://owasp.org/www-community/attacks/xss/"
    ]
  },
  {
    "name": "Reflected Cross-Site Scripting (XSS)",
    "issueBackground": "Reflected Cross-Site Scripting (XSS) occurs when an application immediately reflects user-supplied input in a web page without proper sanitization or validation. Unlike stored XSS, the malicious script is not stored in the application but is included in a URL or request and executed in the victim's browser when the crafted link is clicked. This type of XSS can be exploited to steal session tokens, impersonate users, or spread malware.",
    "Recommendations" :[ 
      "Validate and sanitize all user inputs on the server side to remove potentially malicious code.",
      "Use libraries like OWASP Java Encoder or DOMPurify for safe handling of HTML input.",
      "Escape special characters in user-generated content before rendering it on the web page.",
      "Use context-aware escaping (e.g., escape for HTML, JavaScript, or URLs).",
      "Define a strict CSP header to restrict the sources of executable scripts (e.g., script-src 'self';).",
      "Block inline scripts using CSP rules.",
      "Set the HttpOnly flag on cookies to prevent them from being accessed via JavaScript.",
      "Use the Secure flag to ensure cookies are transmitted only over HTTPS.",
      "If the application allows rich text input (e.g., via WYSIWYG editors), limit allowed tags and attributes to a safe subset.",
      "Leverage built-in security mechanisms in web frameworks, such as Angular's or React's DOM sanitization.",
      "Use parameterized queries or prepared statements to prevent script injection into databases."
  ],
    "relatedLinks": [
      "[1] https://www.imperva.com/learn/application-security/reflected-xss-attacks/",
      "[2] https://owasp.org/www-community/attacks/xss/"
    ]
  },
  {
    "name": "OTP Bypass via Brute Force",
    "issueBackground": "One-Time Password (OTP) bypass via brute force occurs when an application does not properly restrict the number of OTP submission attempts, allowing attackers to systematically try different OTP combinations until they find the correct one. This vulnerability is often exploited when there is no rate limiting or CAPTCHA protection, the OTP length is too short (e.g., 4-6 digits), the OTP remains valid for an extended period, or the application fails to block or alert on excessive failed OTP attempts. If successfully exploited, an attacker can gain unauthorized access to user accounts, bypass multi-factor authentication (MFA), and compromise sensitive data.",
    "Recommendations" :[ 
      "Restrict the number of OTP attempts per user (e.g., 3-5 failed attempts before account lockout).",
      "Use exponential backoff or introduce a cooldown period after multiple failed attempts.",
      "Require CAPTCHA verification after a few failed OTP attempts to prevent automated attacks.",
      "Use longer OTPs (e.g., 8+ characters) instead of 4-6 digit codes.",
      "Reduce OTP validity time to a short window (e.g., 30-60 seconds).",
      "Trigger alerts for excessive failed attempts from a single IP or user account."
  ],
    "relatedLinks": [
      "[1] https://hackerone.com/reports/1060541",
      "[2] https://cwe.mitre.org/data/definitions/288.html"
    ]
  },
   {
    "name": "OTP Flooding",
    "issueBackground": "OTP Flooding Attack occurs when an attacker repeatedly requests OTPs for a target phone number or email, overwhelming the recipient with a large volume of OTP messages. This can lead to Denial of Service (DoS) for the victim, making it difficult for them to access their account or receive legitimate OTPs. Attackers may also exploit OTP flooding to increase SMS/email costs for the service provider or use it as a distraction for other attacks, such as account takeover or social engineering.",
    "Recommendations" :[ 
      "Restrict the number of OTP requests per user within a defined time frame (e.g., 3 attempts per 10 minutes).",
      "Require CAPTCHA verification after a few failed OTP attempts to prevent automated abuse.",
      "Ensure a newly requested OTP invalidates the previous one, preventing OTP flooding abuse."
  ],
    "relatedLinks": [
      "[1] https://www.ctm360.com/blogs/otp-sms-attack",
      "[2] https://ringcaptcha.com/voice-sms-otp-resource-exhaustion-attacks"
    ]
  },
  {
    "name": "Business Logic Bypass",
    "issueBackground": "A Business Logic Bypass occurs when an attacker exploits flaws in the application's workflow or logic to perform unintended actions that violate security policies. Unlike traditional vulnerabilities, this type of attack does not rely on injecting malicious code but instead abuses the intended functionality of the application. Examples include bypassing payment validation, skipping authentication steps, exploiting race conditions, or modifying request parameters to gain unauthorized access or discounts. If successfully exploited, business logic flaws can lead to financial fraud, data leakage, privilege escalation, or service disruption.",
    "Recommendations" :[ 
      "Ensure that all critical business rules are enforced server-side, preventing tampering with request parameters.",
      "Apply proper authorization checks at every step of the business workflow to prevent unauthorized actions.",
      "Set up logging and alerting mechanisms to detect suspicious patterns, such as unexpected transaction amounts or unauthorized access attempts.",
      "Prevent abuse by limiting the number of requests per user and implementing CAPTCHA or bot detection mechanisms.",
      "Ensure that critical operations, such as payment processing or account modifications, follow a secure and predictable sequence."
  ],
    "relatedLinks": [
      "[1] https://cwe.mitre.org/data/definitions/840.html",
      "[2] https://csrc.nist.gov/publications/detail/sp/800-218/final"
    ]
  },
  {
    "name": "Password Hashes Exposed in Response",
    "issueBackground": "The exposure of password hashes in the response is a critical security vulnerability that can lead to account compromise. Password hashes should be treated as sensitive information and must never be exposed to users, even if they are hashed using a secure algorithm. Attackers who gain access to these hashes can attempt offline brute-force attacks or leverage them for credential stuffing if users reuse passwords across multiple services. This issue indicates improper handling of sensitive data and a failure to implement secure response filtering, violating best practices such as OWASP’s recommendations on secure password storage and data exposure prevention.",
    "Recommendations" :[ 
      "Ensure that password hashes are never included in API or web responses. Modify the backend logic to exclude the `password_hash` field when returning user data",
      "If debugging or logging is required, ensure that sensitive data like password hashes are logged securely in a protected server-side log file, rather than exposing them in client responses",
      "Ensure that passwords are hashed using a strong algorithm, such as bcrypt, Argon2, or PBKDF2, with a sufficiently high cost factor. Avoid weak hashing algorithms like MD5 or SHA-1, as they are susceptible to brute-force attack"
  ],
    "relatedLinks": [
      "[1] https://cwe.mitre.org/data/definitions/836.html",
      "[2] https://turingsecure.com/knowledge-base/issues/password-hash-disclosure/"
    ]
  },
  {
    "name": "Directory Traversal",
    "issueBackground": "Directory Traversal, also known as Path Traversal, is a security vulnerability that allows an attacker to access files and directories that are stored outside the intended directory, typically through manipulation of file path inputs. By using special character sequences such as '../' (dot-dot-slash), attackers can navigate up the directory tree, potentially gaining access to sensitive files, configuration files, logs, or system files that should not be publicly accessible. This vulnerability can lead to unauthorized information disclosure, data manipulation, or further system exploitation.",
    "Recommendations" :[ 
      "Ensure that all user inputs related to file or directory names are properly sanitized and validated. This includes stripping or rejecting characters like ../, ..%2f, or any other sequences that could traverse directories.",
      "Use strict input validation to only accept file names or paths that meet specific patterns or are whitelisted.",
      "Avoid using user-controlled relative paths for file access. Use absolute paths whenever possible to ensure that access is restricted to the intended directory.",
      "Use methods that return the canonical or absolute path of files to prevent manipulation of file paths (e.g., realpath() in PHP).",
      "Implement proper access control mechanisms to restrict access to sensitive files or directories. Ensure that users or processes only have permission to access",
      "Use least privilege principles for file permissions, ensuring that only authorized users or processes can access critical files.",
      "Restrict file access to a specific directory or set of directories by checking that the requested file path does not navigate outside of this directory.",
      "Implement \"chroot\" or other sandboxing mechanisms to limit access to file systems.",
      "Use trusted libraries and secure functions for handling file paths (e.g., Path.Combine() in .NET, os.path.join() in Python) to avoid potential directory traversal issues."
  ],
    "relatedLinks": [
      "[1] https://www.imperva.com/learn/application-security/directory-traversal/",
      "[2] https://owasp.org/www-community/attacks/Path_Traversal"
    ]
  },
  {
    "name": "Insecure Design Allows Unauthorized Data Access",
    "issueBackground": "Authentication and authorization are fundamental security controls that restrict access to sensitive resources based on user identity and permissions. When an API endpoint is accessible without authentication, it allows unauthenticated users (including attackers) to retrieve data or perform actions intended for logged-in users. This issue typically arises due to misconfigured access controls or unintentional exposure of an endpoint. Attackers can exploit this flaw to retrieve sensitive information, manipulate data, or escalate privileges within the system.",
    "Recommendations" :[ 
      "Ensure all sensitive endpoints require authentication (e.g., using JWT, OAuth 2.0).",
      "Use Role-Based Access Control (RBAC) or Attribute-Based Access Control (ABAC) to restrict access based on user roles or attributes.",
      "Ensure users can only access data they are authorized to view or modify.",
      "Ensure API keys, JWT tokens, and other credentials are securely stored and transmitted over HTTPS.",
      "Implement rate limiting to mitigate brute-force or mass data extraction attempts.",
      "Add proper security headers like CORS and X-Content-Type-Options to secure API endpoints."
  ],
    "relatedLinks": [
      "[1] https://cqr.company/web-vulnerabilities/insufficient-authentication-authorization/",
      "[2] https://www.google.com/search?client=safari&rls=en&q=Insufficient+Authentication+and+Authorization&ie=UTF-8&oe=UTF-8"
    ]
  },
  {
    "name": "Insufficient Authentication and Authorization",
    "issueBackground": "Insufficient Authentication and Authorization vulnerabilities occur when an application fails to properly verify the identity of users or enforce proper access controls to protect resources. Authentication is the process of verifying the identity of a user, while authorization determines what resources a user can access based on their identity or role. Insufficient authentication happens when weak authentication mechanisms (e.g., easy-to-guess passwords, lack of multi-factor authentication) are used, allowing unauthorized users to access the application. Insufficient authorization occurs when there are improper access controls, allowing users to access data or perform actions they shouldn’t be permitted to. These vulnerabilities can result in unauthorized access to sensitive data, privilege escalation, data modification, or full account compromise.",
    "Recommendations" :[ 
      "Use multi-factor authentication (MFA) to add an additional layer of security beyond just usernames and passwords.",
      "Enforce strong password policies, including complexity requirements (e.g., a combination of letters, numbers, and symbols).",
      "Employ account lockouts after multiple failed login attempts to prevent brute force attacks.",
      "Ensure that users can only access data and resources that are appropriate for their role or authorization level.",
      "Implement secure session management practices, such as session timeouts and secure cookie attributes (e.g., HttpOnly, Secure, SameSite).",
      "Ensure that session tokens are regenerated after authentication to prevent session fixation attacks."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
      "[2] https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
    ]
  },
  {
    "name": "Unrestricted File Upload",
    "issueBackground": "Unrestricted File Upload occurs when an application allows users to upload files without properly validating the content, type, or size of the files. This vulnerability can be exploited by attackers to upload malicious files (such as web shells, scripts, or executable files) to the server, potentially leading to remote code execution, unauthorized access, data breaches, or full server compromise. Without proper validation, attackers can upload files that can be executed or used to gain unauthorized access to the system. In many cases, web applications might improperly trust file extensions or rely solely on client-side checks, which can be easily bypassed.",
    "Recommendations" :[ 
      "Restrict file uploads to specific, trusted file types (e.g., only image formats like .jpg, .png, or .gif for image uploads).",
      "Check the MIME type of files both on the client and server side to ensure that uploaded files are of the expected format.",
      "Do not rely solely on file extensions, as they can be easily manipulated.",
      "Implement file size restrictions to prevent users from uploading excessively large files that could overwhelm the server or be used for DoS attacks.",
      "Set a reasonable maximum file size based on the type of file being uploaded (e.g., 10MB for images, 50MB for documents).",
      "Store uploaded files outside of the web root directory (i.e., outside of publicly accessible folders). This prevents attackers from directly accessing uploaded files via a browser.",
      "Rename uploaded files to prevent the attacker from overwriting existing files or executing uploaded files. A common approach is to assign a random file name and store metadata in a database.",
      "Use antivirus software or other malware scanning tools to scan all uploaded files for potential threats before they are stored or processed."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",
      "[2] https://owasp.deteact.com/cheat/cheatsheets/Protect_FileUpload_Against_Malicious_File.html"
    ]
  },
  {
    "name": "Concurrent Login Sessions",
    "issueBackground": "Concurrent Login Sessions refer to a security weakness where an application allows multiple active sessions for the same user account without restrictions. This can lead to security risks such as unauthorized access, session hijacking, and account takeover. If an attacker gains access to a user's credentials, they can log in and maintain persistent access without the legitimate user noticing. Additionally, in cases of shared credentials or leaked passwords, multiple active sessions can make it difficult to track unauthorized usage. Secure applications should implement session management policies to limit concurrent logins and notify users of multiple active sessions.",
    "Recommendations" :[ 
      "Allow only one active session per user at a time, logging out the previous session when a new login occurs.",
      "Implement a configurable policy where users can choose whether to allow multiple active sessions.",
      "Display a list of active sessions to users in their account settings.",
      "Send notifications via email or SMS when a new session is initiated from an unrecognized device or location.",
      "Set session expiration times to automatically log out inactive users.",
      "Implement re-authentication for sensitive actions after a period of inactivity.",
      "Store session tokens securely and use HTTP-only, Secure, and SameSite cookie attributes.",
      "Regenerate session tokens upon login to prevent session fixation attacks."
  ],
    "relatedLinks": [
      "[1] https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Session_Management_Cheat_Sheet.md",
      "[2] https://cwe.mitre.org/data/definitions/613.html"
    ]
  },
  {
    "name": "Improper Error Handling",
    "issueBackground": "Improper Error Handling occurs when an application fails to handle errors securely, exposing sensitive system details, stack traces, database queries, or internal implementation logic. Attackers can exploit this information to identify security vulnerabilities, such as SQL injection points, directory structures, or authentication mechanisms. Detailed error messages may also reveal user enumeration risks or cryptographic details, aiding in further attacks. Secure applications should return generic error messages while logging detailed errors for internal debugging.",
    "Recommendations" :[ 
      "Display user-friendly, generic error messages that do not expose sensitive system details.",
      "Avoid displaying stack traces, SQL errors, or file paths in the response.",
      "Log detailed error messages on the server for debugging while preventing exposure to users.",
      "Store logs securely and restrict access to authorized personnel only.",
      "Ensure that debugging features (e.g., verbose error messages, stack traces) are disabled in production environments.",
      "Implement try-catch blocks to gracefully handle unexpected errors.",
      "Avoid exposing error details through API responses or user interfaces."
  ],
    "relatedLinks": [
      "[1] https://cwe.mitre.org/data/definitions/209.html",
      "[2] https://owasp.deteact.com/cheat/cheatsheets/Error_Handling_Cheat_Sheet.html"
    ]
  },
  {
    "name": "Vulnerable JavaScript Dependency",
    "issueBackground": "Vulnerable JavaScript Dependency occurs when an application relies on outdated or insecure third-party JavaScript libraries that contain known security vulnerabilities. Attackers can exploit these vulnerabilities to perform various attacks such as Cross-Site Scripting (XSS), Remote Code Execution (RCE), or Supply Chain Attacks. These vulnerabilities often arise due to missing security updates, unpatched libraries, or dependencies that are no longer maintained. Applications that fail to update their dependencies expose themselves to risks that could compromise user data, authentication mechanisms, and overall system integrity.",
    "Recommendations" :[ 
      "Keep all JavaScript libraries up to date by monitoring security advisories and patch releases.",
      "Use package managers like npm, yarn, or pnpm to manage and track dependencies.",
      "Identify and remove outdated or unnecessary JavaScript libraries from the project.",
      "Replace deprecated dependencies with actively maintained alternatives."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/www-project-dependency-check/",
      "[2] https://security.snyk.io/"
    ]
  },
  {
    "name": "Cookie Without HttpOnly Flag Set",
    "issueBackground": "Cookies Without the HttpOnly Flag pose a security risk because they can be accessed via client-side JavaScript, making them vulnerable to Cross-Site Scripting (XSS) attacks. If an attacker exploits an XSS vulnerability, they can steal session cookies, allowing them to hijack user sessions or perform unauthorized actions. The HttpOnly flag prevents client-side scripts from accessing the cookie, mitigating the risk of theft via JavaScript-based attacks.",
    "Recommendations" :[ 
      "Set the HttpOnly flag for all session and authentication-related cookies to prevent JavaScript access.",
      "Combine the HttpOnly flag with the Secure flag to ensure cookies are only transmitted over HTTPS.",
      "Reduce the impact of XSS by enforcing a strong CSP that limits script execution sources.",
      "Since HttpOnly helps mitigate XSS risks, ensure the application is tested for XSS vulnerabilities and apply necessary fixes."
  ],
    "relatedLinks": [
      "[1] https://www.invicti.com/learn/cookie-security-flags/",
      "[2] https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"
    ]
  },
  {
    "name": "TLS Cookie Without Secure Flag",
    "issueBackground": "Cookies Without the Secure Flag are vulnerable to being transmitted over unencrypted HTTP connections, exposing them to interception by attackers via Man-in-the-Middle (MitM) attacks. When the Secure flag is not set, session tokens, authentication cookies, and other sensitive data can be leaked if a user accidentally accesses the application over an insecure connection. The Secure flag ensures that cookies are only transmitted over HTTPS, reducing the risk of session hijacking and credential theft.",
    "Recommendations" :[ 
      "Ensure that session and authentication cookies include the Secure flag so they are only sent over HTTPS.",
      "Use HSTS (HTTP Strict Transport Security) to force all connections over HTTPS.",
      "Redirect all HTTP traffic to HTTPS using server-side configurations (e.g., Nginx, Apache, or Cloudflare settings).",
      "Combine Secure with HttpOnly and SameSite for stronger protection."
  ],
    "relatedLinks": [
      "[1] https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
      "[2] https://datatracker.ietf.org/doc/html/rfc6265"
    ]
  },
  {
    "name": "Email Flooding Attack",
    "issueBackground": "Email Flooding Attack occurs when an attacker exploits a system’s email-sending functionality to generate and send a massive number of emails in a short period. This can overwhelm a user's inbox, disrupt normal communication, exhaust system resources, and even lead to email service blacklisting. Email flooding can be used for denial-of-service (DoS) attacks, spam campaigns, or distraction techniques to mask other malicious activities, such as account takeover attempts.",
    "Recommendations" :[ 
      "Restrict the number of emails a user or IP address can send within a specific time frame.",
      "Implement CAPTCHA or reCAPTCHA on forms that trigger email sending (e.g., contact forms, password resets) to prevent automated abuse.",
      "Introduce a delay or cooldown period between successive email requests (e.g., one password reset email per minute).",
      "Employ an email queue system to manage bulk email processing and prevent overload.",
      "Throttle outgoing emails to avoid hitting email service provider rate limits."
  ],
    "relatedLinks": [
      "[1] https://owasp.org/www-project-automated-threats-to-web-applications/",
      "[2] https://www.hornetsecurity.com/en/blog/email-bombing/"
    ]
  },
  {
    "name": "Sensitive Information Disclosure via robots.txt",
    "issueBackground": "Sensitive Information Disclosure via robots.txt occurs when a website’s robots.txt file inadvertently exposes sensitive information about the site’s internal structure or private areas. The robots.txt file is publicly accessible and used by search engine bots to determine which pages or directories should not be crawled. However, if sensitive or private URLs, paths, or directories are listed in this file, they could give attackers valuable insights into the site’s internal structure, making it easier to target and exploit vulnerabilities. For example, an attacker could identify areas like admin panels, internal API endpoints, or other private sections meant to be restricted but only protected by obscurity.",
    "Recommendations" :[ 
      "Ensure that only necessary and non-sensitive paths are included in robots.txt.",
      "Do not list sensitive or private paths in the robots.txt file. For example, avoid adding entries like Disallow: /admin/ or Disallow: /private/. Instead, rely on proper authentication and authorization to secure these areas.",
      "Use proper access control mechanisms (authentication, authorization) for sensitive pages rather than relying on robots.txt for protection.",
      "Regularly audit and review the contents of your robots.txt file for potential leakage of sensitive information.",
      "Protect sensitive areas with a Web Application Firewall (WAF) that can block malicious access attempts based on patterns or signatures, even if an attacker has discovered vulnerable URLs via robots.txt.",
      "Instead of using robots.txt for blocking search engine crawlers from sensitive areas, consider using HTTP headers, such as X-Robots-Tag, which can apply restrictions to specific content without disclosing those areas publicly."
  ],
    "relatedLinks": [
      "[1] https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Robots_txt",
      "[2] https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/robotstxt-detected/"
    ]
  },
  {
    "name": "",
    "issueBackground": "",
    "Recommendations" :[ 
      ""
  ],
    "relatedLinks": [
      "[1] ",
      "[2] "
    ]
  }
]
